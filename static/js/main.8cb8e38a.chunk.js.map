{"version":3,"sources":["Profile.js","App.js","serviceWorker.js","index.js","man.svg"],"names":["Profilepath","props","info","data","profiles","location","id","className","src","manpic","alt","list","name","role","address","career","table","sno","college","branch","skills","hobbies","declaration","Resume","profile","map","values","key","index","to","pathname","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gTAmDeA,MA7Cf,SAAqBC,GACb,IAAIC,EAAKC,EAAKC,SAASH,EAAMI,SAASF,KAAKG,IAEjD,OACE,yBAAKC,UAAU,aACX,yBAAKA,UAAU,8BACf,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,yBACV,yBAAKC,IAAKC,IAAQF,UAAU,OAAOG,IAAI,WACpC,gCAAMR,EAAKS,KAAKC,MAChB,gCAAMV,EAAKS,KAAKE,MAChB,gCAAMX,EAAKS,KAAKG,WAG5B,yBAAKP,UAAU,wCACf,yBAAKA,UAAU,yBAEH,iDAA2BL,EAAKS,KAAKI,OACrC,wDAAkCb,EAAKS,KAAKI,OAC5C,+BACI,4BACI,oCACA,uCACA,uCAEJ,4BACI,4BAAKb,EAAKS,KAAKK,MAAMC,KACrB,4BAAKf,EAAKS,KAAKK,MAAME,SACrB,4BAAKhB,EAAKS,KAAKK,MAAMG,UAI7B,uCAAiBjB,EAAKS,KAAKS,OAC3B,wCAAkBlB,EAAKS,KAAKU,QAC5B,4CAAsBnB,EAAKS,KAAKW,iBCrBpD,IAAIC,EAAO,WACP,IAAIC,EAAQrB,EAAKC,SAEnB,OACE,yBAAKG,UAAU,mCACZiB,EAAQC,KAAI,SAACC,GAAD,OACX,yBAAKnB,UAAU,8BAA8BoB,SAJ7CC,GAKA,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,yBACf,yBAAKC,IAAKC,IAAQF,UAAU,OAAOG,IAAI,WACvC,gCAAMgB,EAAOf,KAAKC,MAClB,gCAAMc,EAAOf,KAAKE,MAClB,gCAAMa,EAAOf,KAAKG,SAClB,kBAAC,IAAD,CAAMe,GAAI,CAACC,SAAS,WAAW3B,KAAK,CAACG,QAXvCsB,IAWmDrB,UAAU,mBAA3D,wBAcKwB,EAtCf,WAEE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,WAAWC,UAAWlC,MCD1BmC,QACW,cAA7BC,OAAO/B,SAASgC,UAEe,UAA7BD,OAAO/B,SAASgC,UAEhBD,OAAO/B,SAASgC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.8cb8e38a.chunk.js","sourcesContent":["import React from 'react';\r\nimport manpic from './man.svg';\r\n\r\nimport data from './data/data.json';\r\n\r\n\r\nfunction Profilepath(props) {\r\n        let info=data.profiles[props.location.data.id]\r\n        \r\n  return (\r\n    <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n        <div className=\" card col-lg-3 col-md-3 col-sm-8 col-xs-12\">\r\n            <div className=\"card-body text-center\">\r\n                 <img src={manpic} className=\"logo\" alt=\"manpic\"></img>\r\n                    <h1> {info.list.name}</h1>\r\n                    <h5> {info.list.role}</h5>\r\n                    <h5> {info.list.address}</h5>\r\n            </div>\r\n        </div>\r\n        <div className=\"col-lg-3 col-md-3 col-sm-8 col-xs-12\">\r\n        <div className=\"card-body text-center\">\r\n                \r\n                    <h3>Career Objective:</h3>{info.list.career}\r\n                    <h3>Education Qualification:</h3>{info.list.career}\r\n                    <table>\r\n                        <tr>\r\n                            <th>S.NO</th>\r\n                            <th>College</th>\r\n                            <th>Branch</th>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>{info.list.table.sno}</td>\r\n                            <td>{info.list.table.college}</td>\r\n                            <td>{info.list.table.branch}</td>\r\n                        </tr>\r\n                    </table>\r\n\r\n                    <h3>Skills:</h3>{info.list.skills}\r\n                    <h3>Hobbies:</h3>{info.list.hobbies}\r\n                    <h3>Declaration:</h3>{info.list.declaration}\r\n\r\n        </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Profilepath;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport './bootstrap/bootstrap.min.css';\nimport manpic from './man.svg';\nimport data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport Profilepath from './Profile';\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n      <Route exact path='/' component={Resume}/>\n      <Route exact path='/profile' component={Profilepath}/>\n      \n    </BrowserRouter>\n  );\n}\n\nlet Resume=()=>{\n    let profile=data.profiles;\n    let index;\n  return(\n    <div className=\"row mt-5 justify-content-center\" >\n      {profile.map((values)=>(\n        <div className=\"col-lg-4 col-md-4 col-sm-10\" key={index} >\n        <div className=\"card ml-5\">\n          <div className=\"card-body text-center\">\n          <img src={manpic} className=\"logo\" alt=\"manpic\"></img>\n          <h1> {values.list.name}</h1>\n          <h5> {values.list.role}</h5>\n          <h5> {values.list.address}</h5>\n          <Link to={{pathname:'/profile',data:{id:index}}} className=\"btn btn-success\">View Profile</Link>\n        </div>\n        \n          </div>\n          </div>\n        \n        \n      \n      ))}\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/man.ecdb8c30.svg\";"],"sourceRoot":""}